%!PS-Adobe-3.0 EPSF-3.0
%%Title: /home/lsr/Dropbox/PhD/NeTS/git/phdProposal/gantt.fig
%%Creator: fig2dev Version 3.2 Patchlevel 5d
%%CreationDate: Tue May 21 16:09:47 2013
%%BoundingBox: 0 0 798 827
%Magnification: 1.0000
%%EndComments
%%BeginProlog
/MyAppDict 100 dict dup begin def
/$F2psDict 200 dict def
$F2psDict begin
$F2psDict /mtrx matrix put
/col-1 {0 setgray} bind def
/col0 {0.000 0.000 0.000 srgb} bind def
/col1 {0.000 0.000 1.000 srgb} bind def
/col2 {0.000 1.000 0.000 srgb} bind def
/col3 {0.000 1.000 1.000 srgb} bind def
/col4 {1.000 0.000 0.000 srgb} bind def
/col5 {1.000 0.000 1.000 srgb} bind def
/col6 {1.000 1.000 0.000 srgb} bind def
/col7 {1.000 1.000 1.000 srgb} bind def
/col8 {0.000 0.000 0.560 srgb} bind def
/col9 {0.000 0.000 0.690 srgb} bind def
/col10 {0.000 0.000 0.820 srgb} bind def
/col11 {0.530 0.810 1.000 srgb} bind def
/col12 {0.000 0.560 0.000 srgb} bind def
/col13 {0.000 0.690 0.000 srgb} bind def
/col14 {0.000 0.820 0.000 srgb} bind def
/col15 {0.000 0.560 0.560 srgb} bind def
/col16 {0.000 0.690 0.690 srgb} bind def
/col17 {0.000 0.820 0.820 srgb} bind def
/col18 {0.560 0.000 0.000 srgb} bind def
/col19 {0.690 0.000 0.000 srgb} bind def
/col20 {0.820 0.000 0.000 srgb} bind def
/col21 {0.560 0.000 0.560 srgb} bind def
/col22 {0.690 0.000 0.690 srgb} bind def
/col23 {0.820 0.000 0.820 srgb} bind def
/col24 {0.500 0.190 0.000 srgb} bind def
/col25 {0.630 0.250 0.000 srgb} bind def
/col26 {0.750 0.380 0.000 srgb} bind def
/col27 {1.000 0.500 0.500 srgb} bind def
/col28 {1.000 0.630 0.630 srgb} bind def
/col29 {1.000 0.750 0.750 srgb} bind def
/col30 {1.000 0.880 0.880 srgb} bind def
/col31 {1.000 0.840 0.000 srgb} bind def

end

% This junk string is used by the show operators
/PATsstr 1 string def
/PATawidthshow { 	% cx cy cchar rx ry string
  % Loop over each character in the string
  {  % cx cy cchar rx ry char
    % Show the character
    dup				% cx cy cchar rx ry char char
    PATsstr dup 0 4 -1 roll put	% cx cy cchar rx ry char (char)
    false charpath		% cx cy cchar rx ry char
    /clip load PATdraw
    % Move past the character (charpath modified the
    % current point)
    currentpoint			% cx cy cchar rx ry char x y
    newpath
    moveto			% cx cy cchar rx ry char
    % Reposition by cx,cy if the character in the string is cchar
    3 index eq {			% cx cy cchar rx ry
      4 index 4 index rmoveto
    } if
    % Reposition all characters by rx ry
    2 copy rmoveto		% cx cy cchar rx ry
  } forall
  pop pop pop pop pop		% -
  currentpoint
  newpath
  moveto
} bind def
/PATcg {
  7 dict dup begin
    /lw currentlinewidth def
    /lc currentlinecap def
    /lj currentlinejoin def
    /ml currentmiterlimit def
    /ds [ currentdash ] def
    /cc [ currentrgbcolor ] def
    /cm matrix currentmatrix def
  end
} bind def
% PATdraw - calculates the boundaries of the object and
% fills it with the current pattern
/PATdraw {			% proc
  save exch
    PATpcalc			% proc nw nh px py
    5 -1 roll exec		% nw nh px py
    newpath
    PATfill			% -
  restore
} bind def
% PATfill - performs the tiling for the shape
/PATfill { % nw nh px py PATfill -
  PATDict /CurrentPattern get dup begin
    setfont
    % Set the coordinate system to Pattern Space
    PatternGState PATsg
    % Set the color for uncolored pattezns
    PaintType 2 eq { PATDict /PColor get PATsc } if
    % Create the string for showing
    3 index string		% nw nh px py str
    % Loop for each of the pattern sources
    0 1 Multi 1 sub {		% nw nh px py str source
	% Move to the starting location
	3 index 3 index		% nw nh px py str source px py
	moveto			% nw nh px py str source
	% For multiple sources, set the appropriate color
	Multi 1 ne { dup PC exch get PATsc } if
	% Set the appropriate string for the source
	0 1 7 index 1 sub { 2 index exch 2 index put } for pop
	% Loop over the number of vertical cells
	3 index 		% nw nh px py str nh
	{			% nw nh px py str
	  currentpoint		% nw nh px py str cx cy
	  2 index oldshow	% nw nh px py str cx cy
	  YStep add moveto	% nw nh px py str
	} repeat		% nw nh px py str
    } for
    5 { pop } repeat
  end
} bind def

% PATkshow - kshow with the current pattezn
/PATkshow {			% proc string
  exch bind			% string proc
  1 index 0 get			% string proc char
  % Loop over all but the last character in the string
  0 1 4 index length 2 sub {
				% string proc char idx
    % Find the n+1th character in the string
    3 index exch 1 add get	% string proc char char+1
    exch 2 copy			% strinq proc char+1 char char+1 char
    % Now show the nth character
    PATsstr dup 0 4 -1 roll put	% string proc chr+1 chr chr+1 (chr)
    false charpath		% string proc char+1 char char+1
    /clip load PATdraw
    % Move past the character (charpath modified the current point)
    currentpoint newpath moveto
    % Execute the user proc (should consume char and char+1)
    mark 3 1 roll		% string proc char+1 mark char char+1
    4 index exec		% string proc char+1 mark...
    cleartomark			% string proc char+1
  } for
  % Now display the last character
  PATsstr dup 0 4 -1 roll put	% string proc (char+1)
  false charpath		% string proc
  /clip load PATdraw
  neewath
  pop pop			% -
} bind def
% PATmp - the makepattern equivalent
/PATmp {			% patdict patmtx PATmp patinstance
  exch dup length 7 add		% We will add 6 new entries plus 1 FID
  dict copy			% Create a new dictionary
  begin
    % Matrix to install when painting the pattern
    TilingType PATtcalc
    /PatternGState PATcg def
    PatternGState /cm 3 -1 roll put
    % Check for multi pattern sources (Level 1 fast color patterns)
    currentdict /Multi known not { /Multi 1 def } if
    % Font dictionary definitions
    /FontType 3 def
    % Create a dummy encoding vector
    /Encoding 256 array def
    3 string 0 1 255 {
      Encoding exch dup 3 index cvs cvn put } for pop
    /FontMatrix matrix def
    /FontBBox BBox def
    /BuildChar {
	mark 3 1 roll		% mark dict char
	exch begin
	Multi 1 ne {PaintData exch get}{pop} ifelse  % mark [paintdata]
	  PaintType 2 eq Multi 1 ne or
	  { XStep 0 FontBBox aload pop setcachedevice }
	  { XStep 0 setcharwidth } ifelse
	  currentdict		% mark [paintdata] dict
	  /PaintProc load	% mark [paintdata] dict paintproc
	end
	gsave
	  false PATredef exec true PATredef
	grestore
	cleartomark		% -
    } bind def
    currentdict
  end				% newdict
  /foo exch			% /foo newlict
  definefont			% newfont
} bind def
% PATpcalc - calculates the starting point and width/height
% of the tile fill for the shape
/PATpcalc {	% - PATpcalc nw nh px py
  PATDict /CurrentPattern get begin
    gsave
	% Set up the coordinate system to Pattern Space
	% and lock down pattern
	PatternGState /cm get setmatrix
	BBox aload pop pop pop translate
	% Determine the bounding box of the shape
	pathbbox			% llx lly urx ury
    grestore
    % Determine (nw, nh) the # of cells to paint width and height
    PatHeight div ceiling		% llx lly urx qh
    4 1 roll				% qh llx lly urx
    PatWidth div ceiling		% qh llx lly qw
    4 1 roll				% qw qh llx lly
    PatHeight div floor			% qw qh llx ph
    4 1 roll				% ph qw qh llx
    PatWidth div floor			% ph qw qh pw
    4 1 roll				% pw ph qw qh
    2 index sub cvi abs			% pw ph qs qh-ph
    exch 3 index sub cvi abs exch	% pw ph nw=qw-pw nh=qh-ph
    % Determine the starting point of the pattern fill
    %(px, py)
    4 2 roll				% nw nh pw ph
    PatHeight mul			% nw nh pw py
    exch				% nw nh py pw
    PatWidth mul exch			% nw nh px py
  end
} bind def

% Save the original routines so that we can use them later on
/oldfill	/fill load def
/oldeofill	/eofill load def
/oldstroke	/stroke load def
/oldshow	/show load def
/oldashow	/ashow load def
/oldwidthshow	/widthshow load def
/oldawidthshow	/awidthshow load def
/oldkshow	/kshow load def

% These defs are necessary so that subsequent procs don't bind in
% the originals
/fill	   { oldfill } bind def
/eofill	   { oldeofill } bind def
/stroke	   { oldstroke } bind def
/show	   { oldshow } bind def
/ashow	   { oldashow } bind def
/widthshow { oldwidthshow } bind def
/awidthshow { oldawidthshow } bind def
/kshow 	   { oldkshow } bind def
/PATredef {
  MyAppDict begin
    {
    /fill { /clip load PATdraw newpath } bind def
    /eofill { /eoclip load PATdraw newpath } bind def
    /stroke { PATstroke } bind def
    /show { 0 0 null 0 0 6 -1 roll PATawidthshow } bind def
    /ashow { 0 0 null 6 3 roll PATawidthshow }
    bind def
    /widthshow { 0 0 3 -1 roll PATawidthshow }
    bind def
    /awidthshow { PATawidthshow } bind def
    /kshow { PATkshow } bind def
  } {
    /fill   { oldfill } bind def
    /eofill { oldeofill } bind def
    /stroke { oldstroke } bind def
    /show   { oldshow } bind def
    /ashow  { oldashow } bind def
    /widthshow { oldwidthshow } bind def
    /awidthshow { oldawidthshow } bind def
    /kshow  { oldkshow } bind def
    } ifelse
  end
} bind def
false PATredef
% Conditionally define setcmykcolor if not available
/setcmykcolor where { pop } {
  /setcmykcolor {
    1 sub 4 1 roll
    3 {
	3 index add neg dup 0 lt { pop 0 } if 3 1 roll
    } repeat
    setrgbcolor - pop
  } bind def
} ifelse
/PATsc {		% colorarray
  aload length		% c1 ... cn length
    dup 1 eq { pop setgray } { 3 eq { setrgbcolor } { setcmykcolor
  } ifelse } ifelse
} bind def
/PATsg {		% dict
  begin
    lw setlinewidth
    lc setlinecap
    lj setlinejoin
    ml setmiterlimit
    ds aload pop setdash
    cc aload pop setrgbcolor
    cm setmatrix
  end
} bind def

/PATDict 3 dict def
/PATsp {
  true PATredef
  PATDict begin
    /CurrentPattern exch def
    % If it's an uncolored pattern, save the color
    CurrentPattern /PaintType get 2 eq {
      /PColor exch def
    } if
    /CColor [ currentrgbcolor ] def
  end
} bind def
% PATstroke - stroke with the current pattern
/PATstroke {
  countdictstack
  save
  mark
  {
    currentpoint strokepath moveto
    PATpcalc				% proc nw nh px py
    clip newpath PATfill
    } stopped {
	(*** PATstroke Warning: Path is too complex, stroking
	  with gray) =
    cleartomark
    restore
    countdictstack exch sub dup 0 gt
	{ { end } repeat } { pop } ifelse
    gsave 0.5 setgray oldstroke grestore
  } { pop restore pop } ifelse
  newpath
} bind def
/PATtcalc {		% modmtx tilingtype PATtcalc tilematrix
  % Note: tiling types 2 and 3 are not supported
  gsave
    exch concat					% tilingtype
    matrix currentmatrix exch			% cmtx tilingtype
    % Tiling type 1 and 3: constant spacing
    2 ne {
	% Distort the pattern so that it occupies
	% an integral number of device pixels
	dup 4 get exch dup 5 get exch		% tx ty cmtx
	XStep 0 dtransform
	round exch round exch			% tx ty cmtx dx.x dx.y
	XStep div exch XStep div exch		% tx ty cmtx a b
	0 YStep dtransform
	round exch round exch			% tx ty cmtx a b dy.x dy.y
	YStep div exch YStep div exch		% tx ty cmtx a b c d
	7 -3 roll astore			% { a b c d tx ty }
    } if
  grestore
} bind def
/PATusp {
  false PATredef
  PATDict begin
    CColor PATsc
  end
} bind def

% this is the pattern fill program from the Second edition Reference Manual
% with changes to call the above pattern fill
% left30
11 dict begin
/PaintType 1 def
/PatternType 1 def
/TilingType 1 def
/BBox [0 0 1 1] def
/XStep 1 def
/YStep 1 def
/PatWidth 1 def
/PatHeight 1 def
/Multi 2 def
/PaintData [
  { clippath } bind
  { 32 16 true [ 32 0 0 -16 0 16 ]
	{<c000c000300030000c000c000300030000c000c000300030
	000c000c00030003c000c000300030000c000c0003000300
	00c000c000300030000c000c00030003>}
     imagemask } bind
] def
/PaintProc {
	pop
	exec fill
} def
currentdict
end
/P1 exch def

% right30
11 dict begin
/PaintType 1 def
/PatternType 1 def
/TilingType 1 def
/BBox [0 0 1 1] def
/XStep 1 def
/YStep 1 def
/PatWidth 1 def
/PatHeight 1 def
/Multi 2 def
/PaintData [
  { clippath } bind
  { 32 16 true [ 32 0 0 -16 0 16 ]
	{<00030003000c000c0030003000c000c0030003000c000c00
	30003000c000c00000030003000c000c0030003000c000c0
	030003000c000c0030003000c000c000>}
     imagemask } bind
] def
/PaintProc {
	pop
	exec fill
} def
currentdict
end
/P2 exch def

% crosshatch30
11 dict begin
/PaintType 1 def
/PatternType 1 def
/TilingType 1 def
/BBox [0 0 1 1] def
/XStep 1 def
/YStep 1 def
/PatWidth 1 def
/PatHeight 1 def
/Multi 2 def
/PaintData [
  { clippath } bind
  { 32 16 true [ 32 0 0 -16 0 16 ]
	{<033003300c0c0c0c30033003c000c000300330030c0c0c0c
	0330033000c000c0033003300c0c0c0c30033003c000c000
	300330030c0c0c0c0330033000c000c0>}
     imagemask } bind
] def
/PaintProc {
	pop
	exec fill
} def
currentdict
end
/P3 exch def

% left45
11 dict begin
/PaintType 1 def
/PatternType 1 def
/TilingType 1 def
/BBox [0 0 1 1] def
/XStep 1 def
/YStep 1 def
/PatWidth 1 def
/PatHeight 1 def
/Multi 2 def
/PaintData [
  { clippath } bind
  { 20 20 true [ 20 0 0 -20 0 20 ]
	{<8020004010002008001004000802000401000200
	8001004000802000401080200040100020080010
	0400080200040100020080010040008020004010>}
     imagemask } bind
] def
/PaintProc {
	pop
	exec fill
} def
currentdict
end
/P4 exch def

% right45
11 dict begin
/PaintType 1 def
/PatternType 1 def
/TilingType 1 def
/BBox [0 0 1 1] def
/XStep 1 def
/YStep 1 def
/PatWidth 1 def
/PatHeight 1 def
/Multi 2 def
/PaintData [
  { clippath } bind
  { 20 20 true [ 20 0 0 -20 0 20 ]
	{<0040100080200100400200800401000802001004
	0020080040100080200000401000802001004002
	0080040100080200100400200800401000802000>}
     imagemask } bind
] def
/PaintProc {
	pop
	exec fill
} def
currentdict
end
/P5 exch def

% crosshatch45
11 dict begin
/PaintType 1 def
/PatternType 1 def
/TilingType 1 def
/BBox [0 0 1 1] def
/XStep 1 def
/YStep 1 def
/PatWidth 1 def
/PatHeight 1 def
/Multi 2 def
/PaintData [
  { clippath } bind
  { 20 20 true [ 20 0 0 -20 0 20 ]
	{<8020004050102088201104400a02800401000a02
	8011044020882040501080200040501020882011
	04400a02800401000a0280110440208820405010>}
     imagemask } bind
] def
/PaintProc {
	pop
	exec fill
} def
currentdict
end
/P6 exch def

% bricks
11 dict begin
/PaintType 1 def
/PatternType 1 def
/TilingType 1 def
/BBox [0 0 1 1] def
/XStep 1 def
/YStep 1 def
/PatWidth 1 def
/PatHeight 1 def
/Multi 2 def
/PaintData [
  { clippath } bind
  { 16 16 true [ 16 0 0 -16 0 16 ]
	{<008000800080008000800080
	 0080ffff8000800080008000
	 800080008000ffff>}
        imagemask } bind
] def
/PaintProc {
	pop
	exec fill
} def
currentdict
end
/P7 exch def

% vertical bricks
11 dict begin
/PaintType 1 def
/PatternType 1 def
/TilingType 1 def
/BBox [0 0 1 1] def
/XStep 1 def
/YStep 1 def
/PatWidth 1 def
/PatHeight 1 def
/Multi 2 def
/PaintData [
  { clippath } bind
  { 16 16 true [ 16 0 0 -16 0 16 ]
	{<ff8080808080808080808080
	  8080808080ff808080808080
	  8080808080808080> }
        imagemask } bind
] def
/PaintProc {
	pop
	exec fill
} def
currentdict
end
/P8 exch def

/cp {closepath} bind def
/ef {eofill} bind def
/gr {grestore} bind def
/gs {gsave} bind def
/sa {save} bind def
/rs {restore} bind def
/l {lineto} bind def
/m {moveto} bind def
/rm {rmoveto} bind def
/n {newpath} bind def
/s {stroke} bind def
/sh {show} bind def
/slc {setlinecap} bind def
/slj {setlinejoin} bind def
/slw {setlinewidth} bind def
/srgb {setrgbcolor} bind def
/rot {rotate} bind def
/sc {scale} bind def
/sd {setdash} bind def
/ff {findfont} bind def
/sf {setfont} bind def
/scf {scalefont} bind def
/sw {stringwidth} bind def
/tr {translate} bind def
/tnt {dup dup currentrgbcolor
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add srgb}
  bind def
/shd {dup dup currentrgbcolor 4 -2 roll mul 4 -2 roll mul
  4 -2 roll mul srgb} bind def
/$F2psBegin {$F2psDict begin /$F2psEnteredState save def} def
/$F2psEnd {$F2psEnteredState restore end} def

/pageheader {
save
newpath 0 827 moveto 0 0 lineto 798 0 lineto 798 827 lineto closepath clip newpath
-54.6 795.8 translate
1 -1 scale
$F2psBegin
10 setmiterlimit
0 slj 0 slc
 0.06299 0.06299 sc
} bind def
/pagefooter {
$F2psEnd
restore
} bind def
%%EndProlog
pageheader
%
% Fig objects follow
%
% 
% here starts figure with depth 50
% Polyline
0 slj
0 slc
7.500 slw
n 4155 900 m 4050 900 4050 1245 105 arcto 4 {pop} repeat
  4050 1350 7095 1350 105 arcto 4 {pop} repeat
  7200 1350 7200 1005 105 arcto 4 {pop} repeat
  7200 900 4155 900 105 arcto 4 {pop} repeat
 cp gs /PC [[0.53 0.81 1.00] [0.00 0.00 0.00]] def
15.00 15.00 sc P1 [16 0 0 -8 270.00 60.00] PATmp PATsp ef gr PATusp gs col0 s gr 
% Polyline
15.000 slw
n 900 -450 m
 4050 900 l gs col0 s gr 
% Polyline
30.000 slw
n 1005 -450 m 900 -450 900 12495 105 arcto 4 {pop} repeat
  900 12600 13395 12600 105 arcto 4 {pop} repeat
  13500 12600 13500 -345 105 arcto 4 {pop} repeat
  13500 -450 1005 -450 105 arcto 4 {pop} repeat
 cp gs col0 s gr 
% Polyline
15.000 slw
n 7200 -450 m
 7200 12600 l gs col0 s gr 
% Polyline
n 10350 -450 m
 10350 12600 l gs col0 s gr 
% Polyline
7.500 slw
n 6405 4050 m 6300 4050 6300 4395 105 arcto 4 {pop} repeat
  6300 4500 8445 4500 105 arcto 4 {pop} repeat
  8550 4500 8550 4155 105 arcto 4 {pop} repeat
  8550 4050 6405 4050 105 arcto 4 {pop} repeat
 cp gs /PC [[1.00 1.00 0.00] [0.00 0.00 0.00]] def
15.00 15.00 sc P1 [16 0 0 -8 420.00 270.00] PATmp PATsp ef gr PATusp gs col0 s gr 
% Polyline
n 6405 4500 m 6300 4500 6300 4845 105 arcto 4 {pop} repeat
  6300 4950 8445 4950 105 arcto 4 {pop} repeat
  8550 4950 8550 4605 105 arcto 4 {pop} repeat
  8550 4500 6405 4500 105 arcto 4 {pop} repeat
 cp gs /PC [[1.00 1.00 0.00] [0.00 0.00 0.00]] def
15.00 15.00 sc P2 [16 0 0 -8 420.00 300.00] PATmp PATsp ef gr PATusp gs col0 s gr 
% Polyline
n 7305 4950 m 7200 4950 7200 5295 105 arcto 4 {pop} repeat
  7200 5400 8895 5400 105 arcto 4 {pop} repeat
  9000 5400 9000 5055 105 arcto 4 {pop} repeat
  9000 4950 7305 4950 105 arcto 4 {pop} repeat
 cp gs /PC [[1.00 1.00 0.00] [0.00 0.00 0.00]] def
15.00 15.00 sc P3 [16 0 0 -8 480.00 330.00] PATmp PATsp ef gr PATusp gs col0 s gr 
% Polyline
n 8205 5400 m 8100 5400 8100 5745 105 arcto 4 {pop} repeat
  8100 5850 9345 5850 105 arcto 4 {pop} repeat
  9450 5850 9450 5505 105 arcto 4 {pop} repeat
  9450 5400 8205 5400 105 arcto 4 {pop} repeat
 cp gs /PC [[1.00 1.00 0.00] [0.00 0.00 0.00]] def
15.00 15.00 sc P4 [16 0 0 -16 540.00 360.00] PATmp PATsp ef gr PATusp gs col0 s gr 
% Polyline
n 8205 5850 m 8100 5850 8100 6195 105 arcto 4 {pop} repeat
  8100 6300 9345 6300 105 arcto 4 {pop} repeat
  9450 6300 9450 5955 105 arcto 4 {pop} repeat
  9450 5850 8205 5850 105 arcto 4 {pop} repeat
 cp gs /PC [[1.00 1.00 0.00] [0.00 0.00 0.00]] def
15.00 15.00 sc P5 [16 0 0 -16 540.00 390.00] PATmp PATsp ef gr PATusp gs col0 s gr 
% Polyline
n 8205 6300 m 8100 6300 8100 6645 105 arcto 4 {pop} repeat
  8100 6750 9345 6750 105 arcto 4 {pop} repeat
  9450 6750 9450 6405 105 arcto 4 {pop} repeat
  9450 6300 8205 6300 105 arcto 4 {pop} repeat
 cp gs /PC [[1.00 1.00 0.00] [0.00 0.00 0.00]] def
15.00 15.00 sc P6 [16 0 0 -16 540.00 420.00] PATmp PATsp ef gr PATusp gs col0 s gr 
% Polyline
n 8205 6750 m 8100 6750 8100 7095 105 arcto 4 {pop} repeat
  8100 7200 10245 7200 105 arcto 4 {pop} repeat
  10350 7200 10350 6855 105 arcto 4 {pop} repeat
  10350 6750 8205 6750 105 arcto 4 {pop} repeat
 cp gs /PC [[1.00 1.00 0.00] [0.00 0.00 0.00]] def
15.00 15.00 sc P7 [16 0 0 16 540.00 450.00] PATmp PATsp ef gr PATusp gs col0 s gr 
% Polyline
n 8205 7200 m 8100 7200 8100 7545 105 arcto 4 {pop} repeat
  8100 7650 10245 7650 105 arcto 4 {pop} repeat
  10350 7650 10350 7305 105 arcto 4 {pop} repeat
  10350 7200 8205 7200 105 arcto 4 {pop} repeat
 cp gs /PC [[1.00 1.00 0.00] [0.00 0.00 0.00]] def
15.00 15.00 sc P8 [16 0 0 -16 540.00 480.00] PATmp PATsp ef gr PATusp gs col0 s gr 
% Polyline
15.000 slw
n 900 900 m
 13500 900 l gs col0 s gr 
% Polyline
7.500 slw
n 4155 1350 m 4050 1350 4050 1695 105 arcto 4 {pop} repeat
  4050 1800 7095 1800 105 arcto 4 {pop} repeat
  7200 1800 7200 1455 105 arcto 4 {pop} repeat
  7200 1350 4155 1350 105 arcto 4 {pop} repeat
 cp gs /PC [[0.53 0.81 1.00] [0.00 0.00 0.00]] def
15.00 15.00 sc P2 [16 0 0 -8 270.00 90.00] PATmp PATsp ef gr PATusp gs col0 s gr 
% Polyline
15.000 slw
n 4050 -450 m
 4050 12600 l gs col0 s gr 
% Polyline
7.500 slw
n 4155 1800 m 4050 1800 4050 2145 105 arcto 4 {pop} repeat
  4050 2250 7095 2250 105 arcto 4 {pop} repeat
  7200 2250 7200 1905 105 arcto 4 {pop} repeat
  7200 1800 4155 1800 105 arcto 4 {pop} repeat
 cp gs /PC [[0.53 0.81 1.00] [0.00 0.00 0.00]] def
15.00 15.00 sc P3 [16 0 0 -8 270.00 120.00] PATmp PATsp ef gr PATusp gs col0 s gr 
% Polyline
n 4155 2250 m 4050 2250 4050 2595 105 arcto 4 {pop} repeat
  4050 2700 7095 2700 105 arcto 4 {pop} repeat
  7200 2700 7200 2355 105 arcto 4 {pop} repeat
  7200 2250 4155 2250 105 arcto 4 {pop} repeat
 cp gs /PC [[0.53 0.81 1.00] [0.00 0.00 0.00]] def
15.00 15.00 sc P4 [16 0 0 -16 270.00 150.00] PATmp PATsp ef gr PATusp gs col0 s gr 
% Polyline
n 4155 2700 m 4050 2700 4050 3045 105 arcto 4 {pop} repeat
  4050 3150 7095 3150 105 arcto 4 {pop} repeat
  7200 3150 7200 2805 105 arcto 4 {pop} repeat
  7200 2700 4155 2700 105 arcto 4 {pop} repeat
 cp gs /PC [[0.53 0.81 1.00] [0.00 0.00 0.00]] def
15.00 15.00 sc P5 [16 0 0 -16 270.00 180.00] PATmp PATsp ef gr PATusp gs col0 s gr 
% Polyline
n 4155 3150 m 4050 3150 4050 3495 105 arcto 4 {pop} repeat
  4050 3600 7095 3600 105 arcto 4 {pop} repeat
  7200 3600 7200 3255 105 arcto 4 {pop} repeat
  7200 3150 4155 3150 105 arcto 4 {pop} repeat
 cp gs /PC [[0.53 0.81 1.00] [0.00 0.00 0.00]] def
15.00 15.00 sc P6 [16 0 0 -16 270.00 210.00] PATmp PATsp ef gr PATusp gs col0 s gr 
% Polyline
n 4155 3600 m 4050 3600 4050 3945 105 arcto 4 {pop} repeat
  4050 4050 7095 4050 105 arcto 4 {pop} repeat
  7200 4050 7200 3705 105 arcto 4 {pop} repeat
  7200 3600 4155 3600 105 arcto 4 {pop} repeat
 cp gs /PC [[0.53 0.81 1.00] [0.00 0.00 0.00]] def
15.00 15.00 sc P7 [16 0 0 16 270.00 240.00] PATmp PATsp ef gr PATusp gs col0 s gr 
% Polyline
n 9555 7650 m 9450 7650 9450 7995 105 arcto 4 {pop} repeat
  9450 8100 10245 8100 105 arcto 4 {pop} repeat
  10350 8100 10350 7755 105 arcto 4 {pop} repeat
  10350 7650 9555 7650 105 arcto 4 {pop} repeat
 cp gs /PC [[1.00 0.00 0.00] [0.00 0.00 0.00]] def
15.00 15.00 sc P1 [16 0 0 -8 630.00 510.00] PATmp PATsp ef gr PATusp gs col0 s gr 
% Polyline
n 9555 8100 m 9450 8100 9450 8445 105 arcto 4 {pop} repeat
  9450 8550 10245 8550 105 arcto 4 {pop} repeat
  10350 8550 10350 8205 105 arcto 4 {pop} repeat
  10350 8100 9555 8100 105 arcto 4 {pop} repeat
 cp gs /PC [[1.00 0.00 0.00] [0.00 0.00 0.00]] def
15.00 15.00 sc P2 [16 0 0 -8 630.00 540.00] PATmp PATsp ef gr PATusp gs col0 s gr 
% Polyline
n 900 4050 m
 13500 4050 l gs col0 s gr 
% Polyline
n 900 7650 m
 13500 7650 l gs col0 s gr 
% Polyline
n 10455 8550 m 10350 8550 10350 8895 105 arcto 4 {pop} repeat
  10350 9000 12045 9000 105 arcto 4 {pop} repeat
  12150 9000 12150 8655 105 arcto 4 {pop} repeat
  12150 8550 10455 8550 105 arcto 4 {pop} repeat
 cp gs /PC [[1.00 0.00 0.00] [0.00 0.00 0.00]] def
15.00 15.00 sc P3 [16 0 0 -8 690.00 570.00] PATmp PATsp ef gr PATusp gs col0 s gr 
% Polyline
n 10905 9000 m 10800 9000 10800 9345 105 arcto 4 {pop} repeat
  10800 9450 12045 9450 105 arcto 4 {pop} repeat
  12150 9450 12150 9105 105 arcto 4 {pop} repeat
  12150 9000 10905 9000 105 arcto 4 {pop} repeat
 cp gs /PC [[1.00 0.00 0.00] [0.00 0.00 0.00]] def
15.00 15.00 sc P4 [16 0 0 -16 720.00 600.00] PATmp PATsp ef gr PATusp gs col0 s gr 
% Polyline
n 10455 9900 m 10350 9900 10350 10245 105 arcto 4 {pop} repeat
  10350 10350 11145 10350 105 arcto 4 {pop} repeat
  11250 10350 11250 10005 105 arcto 4 {pop} repeat
  11250 9900 10455 9900 105 arcto 4 {pop} repeat
 cp gs /PC [[0.00 1.00 0.00] [0.00 0.00 0.00]] def
15.00 15.00 sc P1 [16 0 0 -8 690.00 660.00] PATmp PATsp ef gr PATusp gs col0 s gr 
% Polyline
n 10455 10350 m 10350 10350 10350 10695 105 arcto 4 {pop} repeat
  10350 10800 11145 10800 105 arcto 4 {pop} repeat
  11250 10800 11250 10455 105 arcto 4 {pop} repeat
  11250 10350 10455 10350 105 arcto 4 {pop} repeat
 cp gs /PC [[0.00 1.00 0.00] [0.00 0.00 0.00]] def
15.00 15.00 sc P2 [16 0 0 -8 690.00 690.00] PATmp PATsp ef gr PATusp gs col0 s gr 
% Polyline
n 11355 10800 m 11250 10800 11250 11145 105 arcto 4 {pop} repeat
  11250 11250 12045 11250 105 arcto 4 {pop} repeat
  12150 11250 12150 10905 105 arcto 4 {pop} repeat
  12150 10800 11355 10800 105 arcto 4 {pop} repeat
 cp gs /PC [[0.00 1.00 0.00] [0.00 0.00 0.00]] def
15.00 15.00 sc P3 [16 0 0 -8 750.00 720.00] PATmp PATsp ef gr PATusp gs col0 s gr 
% Polyline
n 11355 11250 m 11250 11250 11250 11595 105 arcto 4 {pop} repeat
  11250 11700 12045 11700 105 arcto 4 {pop} repeat
  12150 11700 12150 11355 105 arcto 4 {pop} repeat
  12150 11250 11355 11250 105 arcto 4 {pop} repeat
 cp gs /PC [[0.00 1.00 0.00] [0.00 0.00 0.00]] def
15.00 15.00 sc P4 [16 0 0 -16 750.00 750.00] PATmp PATsp ef gr PATusp gs col0 s gr 
% Polyline
n 12255 11700 m 12150 11700 12150 12045 105 arcto 4 {pop} repeat
  12150 12150 13395 12150 105 arcto 4 {pop} repeat
  13500 12150 13500 11805 105 arcto 4 {pop} repeat
  13500 11700 12255 11700 105 arcto 4 {pop} repeat
 cp gs /PC [[0.00 1.00 0.00] [0.00 0.00 0.00]] def
15.00 15.00 sc P5 [16 0 0 -16 810.00 780.00] PATmp PATsp ef gr PATusp gs col0 s gr 
% Polyline
n 12255 12150 m 12150 12150 12150 12495 105 arcto 4 {pop} repeat
  12150 12600 13395 12600 105 arcto 4 {pop} repeat
  13500 12600 13500 12255 105 arcto 4 {pop} repeat
  13500 12150 12255 12150 105 arcto 4 {pop} repeat
 cp gs /PC [[0.00 1.00 0.00] [0.00 0.00 0.00]] def
15.00 15.00 sc P6 [16 0 0 -16 810.00 810.00] PATmp PATsp ef gr PATusp gs col0 s gr 
% Polyline
n 900 9900 m
 13500 9900 l gs col0 s gr 
% Polyline
n 11355 9450 m 11250 9450 11250 9795 105 arcto 4 {pop} repeat
  11250 9900 13395 9900 105 arcto 4 {pop} repeat
  13500 9900 13500 9555 105 arcto 4 {pop} repeat
  13500 9450 11355 9450 105 arcto 4 {pop} repeat
 cp gs /PC [[1.00 0.00 0.00] [0.00 0.00 0.00]] def
15.00 15.00 sc P5 [16 0 0 -16 750.00 630.00] PATmp PATsp ef gr PATusp gs col0 s gr 
/Times-Roman ff 349.25 scf sf
2070 1260 m
gs 1 -1 sc (1\(a\)) col0 sh gr
/Times-Roman ff 349.25 scf sf
2070 1710 m
gs 1 -1 sc (1\(b\)) col0 sh gr
/Times-Roman ff 349.25 scf sf
2070 2160 m
gs 1 -1 sc (1\(c\)) col0 sh gr
/Times-Roman ff 349.25 scf sf
2070 2610 m
gs 1 -1 sc (1\(d\)) col0 sh gr
/Times-Roman ff 349.25 scf sf
2070 3060 m
gs 1 -1 sc (1\(e\)) col0 sh gr
/Times-Roman ff 349.25 scf sf
2070 3510 m
gs 1 -1 sc (1\(f\)) col0 sh gr
/Times-Bold ff 349.25 scf sf
2700 0 m
gs 1 -1 sc (Years) col0 sh gr
/Times-Bold ff 349.25 scf sf
5400 450 m
gs 1 -1 sc (1st) col0 sh gr
/Times-Bold ff 349.25 scf sf
11700 450 m
gs 1 -1 sc (3rd) col0 sh gr
/Times-Bold ff 349.25 scf sf
1350 450 m
gs 1 -1 sc (Phases) col0 sh gr
/Times-Roman ff 349.25 scf sf
2070 3960 m
gs 1 -1 sc (1\(g\)) col0 sh gr
/Times-Roman ff 349.25 scf sf
2070 4410 m
gs 1 -1 sc (2\(a\)) col0 sh gr
/Times-Roman ff 349.25 scf sf
2070 4860 m
gs 1 -1 sc (2\(b\)) col0 sh gr
/Times-Roman ff 349.25 scf sf
2070 5310 m
gs 1 -1 sc (2\(c\)) col0 sh gr
/Times-Roman ff 349.25 scf sf
2070 5760 m
gs 1 -1 sc (2\(d\)) col0 sh gr
/Times-Roman ff 349.25 scf sf
2070 6210 m
gs 1 -1 sc (2\(e\)) col0 sh gr
/Times-Roman ff 349.25 scf sf
2070 6660 m
gs 1 -1 sc (2\(f\)) col0 sh gr
/Times-Roman ff 349.25 scf sf
2070 7110 m
gs 1 -1 sc (2\(g\)) col0 sh gr
/Times-Roman ff 349.25 scf sf
2070 7560 m
gs 1 -1 sc (2\(h\)) col0 sh gr
%  a 
/Times-Roman ff 349.25 scf sf
2070 8010 m
gs 1 -1 sc (3\(a\)) col0 sh gr
/Times-Roman ff 349.25 scf sf
2070 9810 m
gs 1 -1 sc (3\(e\)) col0 sh gr
/Times-Roman ff 349.25 scf sf
2070 9360 m
gs 1 -1 sc (3\(d\)) col0 sh gr
/Times-Roman ff 349.25 scf sf
2070 8910 m
gs 1 -1 sc (3\(c\)) col0 sh gr
/Times-Roman ff 349.25 scf sf
2070 8460 m
gs 1 -1 sc (3\(b\)) col0 sh gr
%  a 
/Times-Roman ff 349.25 scf sf
2070 10260 m
gs 1 -1 sc (4\(a\)) col0 sh gr
/Times-Roman ff 349.25 scf sf
2070 10710 m
gs 1 -1 sc (4\(b\)) col0 sh gr
/Times-Roman ff 349.25 scf sf
2070 11160 m
gs 1 -1 sc (4\(c\)) col0 sh gr
/Times-Roman ff 349.25 scf sf
2070 11610 m
gs 1 -1 sc (4\(d\)) col0 sh gr
/Times-Roman ff 349.25 scf sf
2070 12060 m
gs 1 -1 sc (4\(e\)) col0 sh gr
/Times-Roman ff 349.25 scf sf
2070 12510 m
gs 1 -1 sc (4\(f\)) col0 sh gr
/Times-Bold ff 349.25 scf sf
8550 450 m
gs 1 -1 sc (2nd) col0 sh gr
% here ends figure;
pagefooter
showpage
%%Trailer
end
%EOF
